//buildscript {
//    repositories {
//        mavenLocal()
//    }
//    dependencies {
//        classpath group: 'com.marketstreamer', name: 'continuousbuild', version: '0.0.1'
//    }
//}


plugins {
    id "com.jfrog.bintray" version "1.0"
}

apply plugin: 'groovy'
apply plugin: 'announce'
//apply plugin: 'marketstreamer-continuousbuild'
apply plugin: 'build-announcements'

dependencies {
    compile("com.google.code.gson:gson:2.2.4")
    compile("commons-io:commons-io:2.4")
}

configurations {
    published
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

configurations {
    deployerJars
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
}

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: "scp://mavenrepo@www.vertexlabs.co.uk:/var/www/repository")  {
            authentication(userName: "mavenrepo", privateKey: System.properties['user.home'] + "/.ssh/id_rsa")
        }
    }
}

// Add the sourceJars to non-extractor modules
artifacts {
    published sourceJar
    published javadocJar
}

bintray {
    user = container_bintray_user
    key = container_bintray_key

    configurations = ['published', 'archives']

    dryRun = false
    publish = true
    pkg {
        repo = 'container'
        userOrg = 'logginghub'
        name = 'container-core'
        desc = 'LoggingHub Container core package'
        websiteUrl = 'https://github.com/logginghub/container'
        issueTrackerUrl = 'https://github.com/logginghub/container/issues'
        vcsUrl = 'https://github.com/https://github.com/logginghub/container.git'
        licenses = ['Apache-2.0']
        publicDownloadNumbers = true
        //Optional version descriptor

        version {
            name = project.version;
//                desc = 'optional, version-specific description'
//                vcsTag = '1.4.4'
//                //attributes= ['a': ['ay1', 'ay2', 'ay3'], 'b': ['bee'], c: 'cee']
        }
    }
}

//    bintray {
//        user = bintray_user
//        key = bintray_key
//        configurations = ['published', 'archives']
//
//        filesSpec {
//            from 'files'
//            into 'standalone_files/level1'
//            rename '(.+)\\.(.+)', '$1-suffix.$2'
//        }
//
//        publish = project.publish
//
//        pkg {
//            repo = 'maven'
//            name = 'mypkg3'
//            desc = 'what a fantastic package indeed!'
//            websiteUrl = 'https://github.com/bintray/gradle-bintray-plugin'
//            issueTrackerUrl = 'https://github.com/bintray/gradle-bintray-plugin/issues'
//            vcsUrl = 'https://github.com/bintray/gradle-bintray-plugin.git'
//            licenses = ['Apache-2.0']
//            labels = ['gear', 'gore', 'gorilla']
//            attributes= ['plat': ['linux', 'osx']]
//            publicDownloadNumbers = true
//
//            version {
//                name = '1.3.x-Final' //Optional logical version name
//                desc = 'optional, version-specific description'
//                vcsTag = '1.3.0'
//                attributes= ['a': ['ay1', 'ay2', 'ay3'], 'b': ['bee'], c: 'cee']
//            }
//        }
//    }

//
//watchdog {
//    tasks = ['test', 'build']
//    dirs = sourceSets*.allSource*.srcDirs.flatten()
//    cooldownTime = 1000
//}


test.addTestListener(new TestListener() {
    @Override
    void beforeSuite(TestDescriptor testDescriptor) {


    }

    @Override
    void afterSuite(TestDescriptor testDescriptor, TestResult testResult) {

    }

    @Override
    void beforeTest(TestDescriptor testDescriptor) {

    }

    @Override
    void afterTest(TestDescriptor testDescriptor, TestResult testResult) {
        if(testResult.getResultType() == TestResult.ResultType.FAILURE) {
            announce.announce("Test: ${testDescriptor.getClassName().replace(".", ". ")}\n ${testDescriptor.getName()}\nFAILED", "local");
        }
    }
})